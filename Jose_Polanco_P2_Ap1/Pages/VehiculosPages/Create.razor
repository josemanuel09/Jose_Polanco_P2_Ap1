@page "/Create"
@page "/Create/{VehiculoId:int}"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
<EditForm Model="vehiculos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro Vehiculos</h1>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-6">
                    <label class="fw-bold">TicketID:</label>
                    <InputNumber @bind-Value="vehiculos.VehiculoId" class="form-control"></InputNumber>
                </div>
                <div class="col-6">
                    <label class="fw-bold">Fecha:</label>
                    <InputDate @bind-Value="vehiculos.Fecha" class="form-control mb-3"></InputDate>
                    <ValidationMessage For="@(() => vehiculos.Fecha)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label class="fw-bold">Descripcion:</label>
                    <InputText @bind-Value="vehiculos.Descripcion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => vehiculos.Descripcion)" />
                </div>
                <div class="col-6">
                    <label class="fw-bold">Costo:</label>
                    <InputNumber @bind-Value="vehiculos.Costo" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => vehiculos.Costo)" />
                </div>
            </div>
            <div class="col-6">
                <label class="fw-bold">Gastos:</label>
                <InputNumber @bind-Value="vehiculos.Gastos" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => vehiculos.Gastos)" />
            </div>

            <h3 class="mt-5">Vehiculos Detalle</h3>

            <div>
                <label class="fw-bold mt-3"> AccesorioId</label>
                <InputSelect @bind-Value="Detalles.AccesorioId" class="form-select">
                    @foreach (var accesorio in listaAccesorios)
                    {
                        <option value="@accesorio.AccesorioId">@accesorio.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Detalles.AccesorioId)" />
            </div>
            <div>
                <label class="fw-bold mt-3">Valor</label>
                <InputNumber @bind-Value="Detalles.Valor" class="form-control" placeholder="Agregue un mensaje."></InputNumber>
                <ValidationMessage For="@(() => Detalles.Valor)" />
            </div>

            <div class="card-footer d-flex justify-content-center">
                <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-success">Agregar</button>
            </div>

            @if (!string.IsNullOrEmpty(MensajeExitoAgregar))
            {
                <div class="alert alert-success" role="alert">
                    @MensajeExitoAgregar
                </div>
            }
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger" role="alert">
                    @MensajeError
                </div>
            }

            <table class='table table-bordered table-hover'>
                <thead>
                    <tr>

                        <th>AccesorioId</th>
                        <th>Valor</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in vehiculos.VehiculosDetalle)
                    {
                        var ticketEncontrado = BuscarVehiculos(detalle.VehiculoId);
                        <tr>

                            <td>@detalle.AccesorioId</td>
                            <td>@detalle.Valor</td>
                            <td><button type="button" class="btn btn-danger bi bi-trash-fill" @onclick=@(() => RemoverDetalle(detalle))></button></td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
        <div class="card-footer text-center ">

            <button class="btn btn-success bi-floppy-fill">Guardar </button>
            <button type="button" class="btn btn-primary bi bi-file-earmark-plus-fill" @onclick="Nuevo">Nuevo </button>
            <a href="/Index" type="button" class="btn btn-secondary bi bi-arrow-left-square-fill" @onclick="Nuevo">Volver atr&aacute;s </a>

        </div>

        @if (!string.IsNullOrEmpty(MensajeExitoGuardar))
        {
            <div class=" alert alert-success" role="alert">
                @MensajeExitoGuardar

            </div>
        }

    </div>
</EditForm>

@code {
    [Parameter]
    public int VehiculoId { get; set; }

    public Vehiculos vehiculos { get; set; } = new Vehiculos();
    public Accesorios accesorios { get; set; } = new Accesorios();
    public List<Accesorios> listaAccesorios = new List<Accesorios>();
    public List<Vehiculos> listaVehiculos = new List<Vehiculos>();

    public VehiculosDetalle Detalles { get; set; } = new VehiculosDetalle();
    public List<VehiculosDetalle> listaDetalles = new List<VehiculosDetalle>();
    public bool valorVacio;
    

    public string MensajeError { get; set; }
    public string MensajeExitoGuardar { get; set; }
    public string MensajeExitoAgregar { get; set; }

    public int resultado { get; set; }
    public string? mensaje { get; set; }
    public string Nombre { get; set; } = string.Empty;
    public string MensajeTicket { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (VehiculoId > 0)
        {
            this.vehiculos.VehiculoId = VehiculoId;
            await Buscar();
        }
        listaAccesorios = await httpClient.GetFromJsonAsync<List<Accesorios>>("api/Accesorios");
        listaVehiculos = await httpClient.GetFromJsonAsync<List<Vehiculos>>("api/Vehiculos");

    }


    private async Task<Vehiculos> BuscarVehiculos(int vehiculoId)
    {
        Vehiculos vehiculos = new Vehiculos();
        var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{vehiculoId}");
        if (vehiculoEncontrado != null)
            return vehiculos = vehiculoEncontrado;
        return new Vehiculos();
    }
    public async Task Buscar()
    {
        var vehiculoIdEncontrado = (await httpClient.GetFromJsonAsync<List<Vehiculos>>($"api/Vehiculos"))!
        .ToList()
        .Any(t => t.VehiculoId == vehiculos.VehiculoId);
        if (vehiculoIdEncontrado)
        {
            var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{vehiculos.VehiculoId}");
            if (vehiculoEncontrado != null)
            {
                this.vehiculos = vehiculoEncontrado;
                StateHasChanged();
            }
        }

    }
    public async Task Guardar()
    {
        if (Detalles.AccesorioId != 0 && Detalles.Valor != 0)
        { 
            vehiculos.VehiculosDetalle.Add(Detalles);

        }
        var response = await httpClient.PostAsJsonAsync($"api/Vehiculos", vehiculos);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }


        //Nuevo();
        //StateHasChanged();
        // navigationManager.NavigateTo("/Index");

    }
    public void Nuevo()
    {
        vehiculos = new Vehiculos();
        Detalles = new VehiculosDetalle();
        listaDetalles = new List<VehiculosDetalle>();

    }

    public async Task Eliminar()
    {
        var response = await httpClient.DeleteAsync($"api/Vehiculos/{vehiculos.VehiculoId}");
        if (!response.IsSuccessStatusCode)
        {
            return;
        }
        Nuevo();
        Volver();
    }

    // public bool Validar()
    // {
    //     valorVacio = string.IsNullOrEmpty(Valor);
    //     return valorVacio;
    // }

    public void AgregarDetalle()
{
    if (Detalles.AccesorioId != 0 && Detalles.Valor != 0)
    {
        var nuevoDetalle = new VehiculosDetalle()
        {
            AccesorioId = Detalles.AccesorioId,
            Valor = Detalles.Valor
        };

        vehiculos.VehiculosDetalle.Add(nuevoDetalle);

        // Limpiamos los campos después de agregar el detalle.
        Detalles.AccesorioId = 0;
        Detalles.Valor = 0;

        StateHasChanged();
    }
    else
    {
        MensajeError = "Ambos campos (AccesorioId y Valor) son requeridos.";
        StateHasChanged();
    }
}


    

    public async Task RemoverDetalle(VehiculosDetalle detalle)
    {
        vehiculos.VehiculosDetalle.Remove(detalle);
        StateHasChanged();
    }




    public void Volver()
    {
        NavigationManager.NavigateTo("Index");
    }
}
